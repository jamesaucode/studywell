{"version":3,"sources":["components/Card.js","components/CurrentCard.js","components/Question.js","components/EditingQuestion.js","components/QuestionList.js","components/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["Component","CurrentCard","state","show","onShowClick","e","_this","setState","prevState","handleKeyDown","keyCode","console","log","componentDidMount","document","addEventListener","_this$props","this","props","question","answer","style","qnum","react_default","a","createElement","className","div","onClick","Question","i","EditingQuestion","card","id","questionInput","answerInput","iInput","focused","onQuestionInputChange","target","value","onAnswerInputChange","onBlur","onFocus","handleEditClick","onEditSubmit","_this$state$card","onChange","name","oninput","QuestionList","cardsInOrder","editing","input","onEditClick","_this2","map","_ref","EditingQuestion_EditingQuestion","sort","b","_ref2","Question_Question","Dashboard","cards","uuid","current","darkMode","collapse","playing","handleShuffleClick","onShuffleClick","j","x","length","Math","floor","random","cardsRandomOrder","onCollapseClick","onLastQuestionClick","onNextQuestionClick","onModeClick","Object","assign","onAddQuestionClick","push","onStartClick","_this$state","darkModeString","btn","btnLong","type","QuestionList_QuestionList","CurrentCard_CurrentCard","App","Dashboard_Dashboard","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f9c86428.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class Card extends Component {\n    state = {\n        show: false\n    }\n    onShowClick = (e) => {\n        this.setState(prevState => ({\n            show: !prevState.show\n        }))\n    }\n  render() {\n    const {question, answer, style} = this.props\n    return (\n    //   <div className=\"card\">\n    <div>\n        {this.state.show ?\n        <div className={style.div}>\n            <h3 className={style.text}>{question}</h3>\n            <h3 className={style.text}>{answer}</h3>\n            <button className=\"btn--dark btn--long\" onClick={this.onShowClick}>Show</button>\n        </div>\n        :\n        <div className={style.div}>\n            <h3 className={style.text}>{question}</h3>\n            <button className=\"btn--dark btn--long\" onClick={this.onShowClick}>Show</button>\n        </div>\n        }\n    </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class CurrentCard extends Component {\n    state = {\n        show: false\n    }\n    onShowClick = (e) => {\n        this.setState(prevState => ({\n            show: !prevState.show\n        }))\n    }\n    handleKeyDown = (e) => {\n      switch (e.keyCode) {\n        case 32:\n        console.log('Show answer!')\n        this.onShowClick(e)\n      }\n    }\n    componentDidMount = () => {\n      document.addEventListener(\"keydown\", this.handleKeyDown, false);\n    }\n  render() {\n      const {question, answer, style, qnum} = this.props\n    return (\n      <div className={style.div + \" big-card\"}>\n      <div className={style.question}>\n        <h3 className=\"big-title\">{qnum + 1}. {question}</h3>\n        {this.state.show ?\n        <button className=\"btn--dark btn--right\" onClick={this.onShowClick}>Hide</button>\n        :\n        <button className=\"btn--dark btn--right\" onClick={this.onShowClick}>Show</button>\n        }\n      </div>\n      <h3 className={style.answer}>{this.state.show && <span>{answer}</span>}</h3>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class Question extends Component {\n  render() {\n      const { i, question, answer } = this.props; \n    return (\n      <div className=\"small-title\">\n        <p className=\"tiny-title\">{i}. {question}</p>\n        <p className=\"tiny-text\">Ans: {answer}</p>\n      </div>\n    )\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class EditingQuestion extends Component {\n  state = {\n    card: {\n      question: this.props.question,\n      answer: this.props.answer,\n      id: this.props.id\n    },\n    i: this.props.i,\n    questionInput: \"\",\n    answerInput: \"\",\n    iInput: \"\",\n    focused: false\n  };\n  onQuestionInputChange = e => {\n    this.setState({\n      card: {\n        question: e.target.value,\n        answer: this.props.answer,\n        id: this.props.id\n      }\n    });\n  };\n  onAnswerInputChange = e => {\n    this.setState({\n      card: {\n        question: this.props.question,\n        answer: e.target.value,\n        id: this.props.id\n      }\n    });\n  };\n  onBlur = e => {\n    console.log(this.state);\n    this.setState({\n      focused: false\n    });\n  };\n  onFocus = e => {\n    this.setState({\n      focused: true\n    });\n  };\n  handleEditClick = () => {\n    this.props.onEditSubmit(this.state.card);\n    this.onBlur();\n  };\n\n  render() {\n    const { question, answer, i } = this.state.card;\n    return (\n      <div className=\"small-title\">\n        <div className=\"small-title\">\n          <input\n            onFocus={this.onFocus}\n            onBlur={this.handleEditClick}\n            value={question}\n            onChange={this.onQuestionInputChange}\n            className=\"tiny-title\"\n          />\n          <textarea\n            onFocus={this.onFocus}\n            onBlur={this.handleEditClick}\n            value={answer}\n            onChange={this.onAnswerInputChange}\n            // className=\"tiny-text\"\n            name=\"text\"\n            oninput='this.style.height = \"\";this.style.height = this.scrollHeight + \"px\"'\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Question from \"./Question\";\nimport EditingQuestion from \"./EditingQuestion\";\n\nexport default class QuestionList extends Component {\n  state = {\n    cardsInOrder: this.props.cardsInOrder,\n    editing: false,\n    input:''\n  };\n  onEditClick = e => {\n    this.setState(prevState => ({\n      editing: !prevState.editing\n    }));\n  };\n  render() {\n    console.log(this.state.input);\n    const cardsInOrder = this.props.cardsInOrder;\n    return (\n      <div className=\"cards\">\n        {this.state.editing ? (\n          <div>\n            <button onClick={this.onEditClick} className=\"btn--dark btn--long\">\n              Finish Editing\n            </button>\n            {cardsInOrder.map(({ question, answer, i, id }) => {\n              return (\n                <EditingQuestion \n                question={question} \n                answer={answer} \n                i={i} \n                id={id}\n                onEditSubmit={this.props.onEditSubmit}\n                />\n              );\n            })}\n          </div>\n        ) : (\n          <div>\n            <button onClick={this.onEditClick} className=\"btn--dark btn--long\">\n              Edit\n            </button>\n            {cardsInOrder\n              .sort((a, b) => a.i > b.i)\n              .map(({ question, answer, i }) => {\n                return <Question question={question} answer={answer} i={i} />;\n              })}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Card from \"./Card\";\nimport uuid from \"uuid\";\nimport CurrentCard from \"./CurrentCard\";\nimport QuestionList from \"./QuestionList\";\n\nexport default class Dashboard extends Component {\n  state = {\n    cards: [\n      {\n        question: \"Pseudocode\",\n        answer:\n          \"a high-level description of the actions of a program or algorithm, using a mixture of English and informal programming language syntax\",\n        i: 1,\n        id: uuid()\n      },\n      {\n        question: \"Algorithm\",\n        answer: \"a step-by-step procedure for solving a problem\",\n        i: 2,\n        id: uuid()\n      },\n      {\n        question: \"Flowchart\",\n        answer:\n          \"a diagram that shows step-by-step progression through a procedure using connecting lines and a set of symbols\",\n        i: 3,\n        id: uuid()\n      },\n      {\n        question: \"program\",\n        answer:\n          \"provide a computer or other machine with coded instructions for the automatic performance of a particular task\",\n        i: 4,\n        id: uuid()\n      },\n      {\n        question: \"Your mom?\",\n        answer: \"Fat\",\n        i: 5,\n        id: uuid()\n      }\n    ],\n    current: {},\n    darkMode: true,\n    collapse: false,\n    playing: false,\n    qnum: 0\n  };\n  // onDrawClick = e => {\n  //   const cards = this.state.cards;\n  //   const randomNumber = Math.floor(\n  //     Math.random(cards.length) * Math.floor(cards.length)\n  //   );\n  //   console.log(randomNumber);\n  //   this.setState({\n  //     current: cards[randomNumber]\n  //   });\n  // };\n  handleShuffleClick = () => {\n    this.onShuffleClick();\n    this.setState({\n      qnum: 0\n    });\n  };\n  onShuffleClick = () => {\n    console.log(\"Everyday I am shuffling\");\n    var cards = this.state.cards;\n    var j, x, i;\n    for (i = cards.length - 1; i > 0; i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      x = cards[i];\n      cards[i] = cards[j];\n      cards[j] = x;\n    }\n    this.setState({\n      cardsRandomOrder: cards\n    });\n  };\n  onCollapseClick = e => {\n    this.setState(prevState => ({\n      collapse: !prevState.collapse\n    }));\n  };\n  onLastQuestionClick = e => {\n    const qnum = this.state.qnum;\n    if (qnum <= 0) {\n      this.setState({\n        qnum: this.state.cards.length - 1\n      })\n    } else {\n      this.setState(prevState => ({\n        qnum: prevState.qnum - 1\n      }));\n    }\n  };\n  onNextQuestionClick = e => {\n    this.setState(prevState => ({\n      qnum: (prevState.qnum + 1) % this.state.cards.length\n    }));\n  };\n  onModeClick = e => {\n    this.setState(prevState => ({\n      darkMode: !prevState.darkMode\n    }));\n  };\n  onEditSubmit = ({ question, answer, id }) => {\n    console.log(question, answer, id);\n    this.setState({\n      cards: this.state.cards.map(card => {\n        console.log(card);\n        if (id === card.id) {\n          return Object.assign({}, card, {\n            question,\n            answer,\n            id\n          });\n        } else {\n          return card;\n        }\n      })\n    });\n  };\n  onAddQuestionClick = e => {\n    this.state.cards.push({\n      question: \"Edit me\",\n      answer: \"Edit me\",\n      id: uuid(),\n      i: this.state.cards.length + 1\n    });\n  };\n  onStartClick = e => {\n    this.setState(prevState => ({\n      playing: !prevState.playing\n    }));\n  };\n  handleKeyDown = e => {\n    if (this.state.playing) {\n      switch (e.keyCode) {\n        case 39:\n          console.log(\"Next meme\");\n          this.onNextQuestionClick(e);\n          break;\n        case 37:\n          console.log(\"Previous meme\");\n          this.onLastQuestionClick(e);\n          break;\n        default:\n          break;\n      }\n    }\n  };\n  componentDidMount = () => {\n    document.addEventListener(\"keydown\", this.handleKeyDown, false);\n  };\n\n  render() {\n    const cardsInOrder = this.state.cards;\n    const cardsRandomOrder = this.state.cardsRandomOrder;\n    const { collapse, qnum, darkMode, playing } = this.state;\n    var darkModeString = \"dark-mode\";\n    var style = {};\n    if (!darkMode) {\n      darkModeString = \"light-mode\";\n      style = {\n        btn: \"btn--light\",\n        btnLong: \"btn--long\",\n        cards: \"cards--dark\",\n        card: {\n          div: \"card--light\",\n          question: \"question--light\",\n          answer: \"answer--light\"\n        }\n      };\n    } else {\n      darkModeString = \"dark-mode\";\n      style = {\n        btn: \"btn--dark\",\n        btnLong: \"btn--long\",\n        cards: \"cards--dark\",\n        card: {\n          div: \"card--dark\",\n          question: \"question--dark\",\n          answer: \"answer--dark\"\n        }\n      };\n    }\n    return (\n      <div className={darkModeString}>\n        <button className={style.btn} onClick={this.onModeClick}>\n          Light mode / Dark mode\n        </button>\n        {collapse ? (\n          <button className={style.btn} onClick={this.onCollapseClick}>\n            Hide all questions\n          </button>\n        ) : (\n          <button className={style.btn} onClick={this.onCollapseClick}>\n            Show all questions\n          </button>\n        )}\n        {playing ? (\n          <button className={style.btn} onClick={this.onStartClick}>\n            Stop\n          </button>\n        ) : (\n          <button className={style.btn} onClick={this.onStartClick}>\n            Start\n          </button>\n        )}\n\n        <button className={style.btn} onClick={this.handleShuffleClick}>\n          Shuffle\n        </button>\n        <button onClick={this.onAddQuestionClick} className={style.btn}>\n          Add Question\n        </button>\n        <input type=\"text\" />\n        {collapse && (\n          <QuestionList\n            cardsInOrder={cardsInOrder}\n            onEditSubmit={this.onEditSubmit}\n          />\n        )}\n        {playing && (\n          <div>\n            <CurrentCard\n              question={this.state.cards[qnum].question}\n              answer={this.state.cards[qnum].answer}\n              style={style.card}\n              qnum={qnum}\n            />\n            <div className=\"btns\">\n              <button\n                className={style.btn + \" btn--big\"}\n                onClick={this.onLastQuestionClick}\n              >\n                &#8592; Previous\n              </button>\n              <button\n                className={style.btn + \" btn--big\"}\n                onClick={this.onNextQuestionClick}\n              >\n                Next &#8594;\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Dashboard from './components/Dashboard'\nimport './reset.css';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n      <Dashboard />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}