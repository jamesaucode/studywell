{"version":3,"sources":["components/Card.js","components/CurrentCard.js","components/Question.js","components/EditingQuestion.js","components/QuestionList.js","components/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["Component","CurrentCard","state","show","onShowClick","e","_this","setState","prevState","_this$props","this","props","question","answer","style","qnum","react_default","a","createElement","className","div","onClick","Question","i","class","EditingQuestion","questionInput","answerInput","iInput","onQuestionInputChange","target","value","onAnswerInputChange","_this$state","onChange","type","QuestionList","cardsInOrder","editing","onEditClick","map","_ref","EditingQuestion_EditingQuestion","sort","b","_ref2","Question_Question","Dashboard","cards","id","uuid","current","darkMode","collapse","onDrawClick","randomNumber","Math","floor","random","length","console","log","handleShuffleClick","onShuffleClick","j","x","cardsRandomOrder","onCollapseClick","onLastQuestionClick","onNextQuestionClick","onModeClick","darkModeString","btn","btnLong","card","QuestionList_QuestionList","CurrentCard_CurrentCard","App","Dashboard_Dashboard","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a14a2d88.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class Card extends Component {\n    state = {\n        show: false\n    }\n    onShowClick = (e) => {\n        this.setState(prevState => ({\n            show: !prevState.show\n        }))\n    }\n  render() {\n    const {question, answer, style} = this.props\n    return (\n    //   <div className=\"card\">\n    <div>\n        {this.state.show ?\n        <div className={style.div}>\n            <h3 className={style.text}>{question}</h3>\n            <h3 className={style.text}>{answer}</h3>\n            <button className=\"btn--dark btn--long\" onClick={this.onShowClick}>Show</button>\n        </div>\n        :\n        <div className={style.div}>\n            <h3 className={style.text}>{question}</h3>\n            <button className=\"btn--dark btn--long\" onClick={this.onShowClick}>Show</button>\n        </div>\n        }\n    </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class CurrentCard extends Component {\n    state = {\n        show: false\n    }\n    onShowClick = (e) => {\n        this.setState(prevState => ({\n            show: !prevState.show\n        }))\n    }\n  render() {\n      const {question, answer, style, qnum} = this.props\n    return (\n      <div className={style.div + \" big-card\"}>\n      <div className={style.question}>\n        <h3 className=\"big-title\">{qnum + 1}. {question}</h3>\n        {this.state.show ?\n        <button className=\"btn--dark btn--right\" onClick={this.onShowClick}>Hide</button>\n        :\n        <button className=\"btn--dark btn--right\" onClick={this.onShowClick}>Show</button>\n        }\n      </div>\n      <h3 className={style.answer}>{this.state.show && <span>{answer}</span>}</h3>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class Question extends Component {\n  render() {\n      const { i, question, answer } = this.props; \n    return (\n      <div class=\"small-title\">\n        <p className=\"tiny-title\">{i}. {question}</p>\n        <p className=\"tiny-text\">Ans: {answer}</p>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class EditingQuestion extends Component {\n    state = {\n        question: this.props.question,\n        answer: this.props.answer,\n        i: this.props.i,\n        questionInput: '',\n        answerInput: '',\n        iInput: ''\n    }\n    onQuestionInputChange = e => {\n        this.setState({\n            question: e.target.value\n        })\n    }\n    onAnswerInputChange = e => {\n        this.setState({\n            answer: e.target.value\n        })\n    }\n  render() {\n    const { question, answer, i } = this.state\n    return (\n      <div className=\"small-title\">\n        <h1 className=\"tiny-title\">Editing Question no.{i}</h1>\n        <input onChange={this.onQuestionInputChange} type=\"text\" value={question}></input>\n        <textarea onChange={this.onAnswerInputChange} type=\"text\" value={answer} />\n      </div>\n    )\n  }\n}\n","import React, { Component } from \"react\";\nimport Question from \"./Question\";\nimport EditingQuestion from \"./EditingQuestion\";\n\nexport default class QuestionList extends Component {\n  state = {\n    cardsInOrder: this.props.cardsInOrder,\n    editing: false\n  };\n  onEditClick = e => {\n    this.setState(prevState => ({\n      editing: !prevState.editing\n    }));\n  };\n  render() {\n    const cardsInOrder = this.state.cardsInOrder;\n    return (\n      <div className=\"cards\">\n        {this.state.editing ? (\n          <div>\n            <button onClick={this.onEditClick} class=\"btn--dark btn--long\">\n              Cancel\n            </button>\n            <button className=\"btn--dark btn--long\">Submit</button>\n            {cardsInOrder.map(({ question, answer, i }) => {\n              return (\n                <EditingQuestion question={question} answer={answer} i={i} />\n              );\n            })}\n          </div>\n        ) : (\n          <div>\n            <button onClick={this.onEditClick} class=\"btn--dark btn--long\">\n              Edit\n            </button>\n            {cardsInOrder\n              .sort((a, b) => a.i > b.i)\n              .map(({ question, answer, i }) => {\n                return <Question question={question} answer={answer} i={i} />;\n              })}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Card from \"./Card\";\nimport uuid from 'uuid';\nimport CurrentCard from \"./CurrentCard\";\nimport QuestionList from \"./QuestionList\";\n\nexport default class Dashboard extends Component {\n  state = {\n    cards: [\n      {\n        question: \"Pseudocode\",\n        answer: \"a high-level description of the actions of a program or algorithm, using a mixture of English and informal programming language syntax\",\n        i: 1,\n        id: uuid()\n      },\n      {\n        question: \"Algorithm\",\n        answer: \"a step-by-step procedure for solving a problem\",\n        i: 2,\n        id: uuid()\n      },\n      {\n        question: \"Flowchart\",\n        answer: \"a diagram that shows step-by-step progression through a procedure using connecting lines and a set of symbols\",\n        i: 3,\n        id: uuid()\n      },\n      {\n        question: \"program\",\n        answer: \"provide a computer or other machine with coded instructions for the automatic performance of a particular task\",\n        i: 4,\n        id: uuid()\n      },\n      {\n        question: \"Your mom?\",\n        answer: \"Fat\",\n        i: 5,\n        id: uuid()\n      }\n    ],\n    // cardsRandomOrder: [\n    //   {\n    //     question: \"Question 1\",\n    //     answer: \"Yes!\"\n    //   },\n    //   {\n    //     question: \"Yes or no\",\n    //     answer: \"hell no..\"\n    //   },\n    //   {\n    //     question: \"LUL\",\n    //     answer: \"Maybe\"\n    //   },\n    //   {\n    //     question: \"Another question\",\n    //     answer: \"I have\"\n    //   },\n    //   {\n    //     question: \"Slim?\",\n    //     answer: \"Fat\"\n    //   }\n    // ],\n    current: {},\n    darkMode: true,\n    collapse: false,\n    qnum: 0\n  };\n  onDrawClick = e => {\n    const cards = this.state.cards;\n    const randomNumber = Math.floor(\n      Math.random(cards.length) * Math.floor(cards.length)\n    );\n    console.log(randomNumber);\n    this.setState({\n      current: cards[randomNumber]\n    });\n  };\n  handleShuffleClick = () => {\n    this.onShuffleClick();\n    this.setState({\n      qnum: 0\n    });\n  };\n  onShuffleClick = () => {\n    console.log(\"Everyday I am shuffling\");\n    var cards = this.state.cards\n    var j, x, i;\n    for (i = cards.length - 1; i > 0; i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      x = cards[i];\n      cards[i] = cards[j];\n      cards[j] = x;\n    }\n    this.setState({\n      cardsRandomOrder: cards\n    });\n  };\n  onCollapseClick = e => {\n    this.setState(prevState => ({\n      collapse: !prevState.collapse\n    }));\n  };\n  onLastQuestionClick = e => {\n    const qnum = this.state.qnum;\n    if (qnum <= 0) {\n      return;\n    } else {\n      this.setState(prevState => ({\n        qnum: prevState.qnum - 1\n      }));\n    }\n  };\n  onNextQuestionClick = e => {\n    this.setState(prevState => ({\n      qnum: (prevState.qnum + 1) % this.state.cards.length\n    }));\n  };\n  onModeClick = e => {\n    this.setState(prevState => ({\n      darkMode: !prevState.darkMode\n    }));\n  };\n  render() {\n    const cardsInOrder = this.state.cards;\n    const cardsRandomOrder = this.state.cardsRandomOrder;\n    const { collapse, qnum, darkMode } = this.state;\n    var darkModeString = \"dark-mode\";\n    var style = {};\n    if (!darkMode) {\n      darkModeString = \"light-mode\";\n      style = {\n        btn: \"btn--light\",\n        btnLong: \"btn--long\",\n        cards: \"cards--dark\",\n        card: {\n          div: \"card--light\",\n          question: \"question--light\",\n          answer: \"answer--light\"\n        }\n      };\n    } else {\n      darkModeString = \"dark-mode\";\n      style = {\n        btn: \"btn--dark\",\n        btnLong: \"btn--long\",\n        cards: \"cards--dark\",\n        card: {\n          div: \"card--dark\",\n          question: \"question--dark\",\n          answer: \"answer--dark\"\n        }\n      };\n    }\n    return (\n      <div className={darkModeString}>\n        <button className={style.btn} onClick={this.onModeClick}>\n          Light mode / Dark mode\n        </button>\n        <button className={style.btn} onClick={this.onCollapseClick}>\n          Show all questions\n        </button>\n        <button className={style.btn} onClick={this.handleShuffleClick}>\n          Shuffle\n        </button>\n        {collapse && (\n            <QuestionList\n            cardsInOrder={cardsInOrder}\n            />\n        )}\n        <CurrentCard\n          question={this.state.cards[qnum].question}\n          answer={this.state.cards[qnum].answer}\n          style={style.card}\n          qnum={qnum}\n        />\n        <div className=\"btns\">\n        <button className={style.btn + \" btn--big\"} onClick={this.onLastQuestionClick}>\n        &#8592; Previous\n        </button>\n        <button className={style.btn + \" btn--big\"} onClick={this.onNextQuestionClick}>\n          Next &#8594;\n        </button>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Dashboard from './components/Dashboard'\nimport './reset.css';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n      <Dashboard />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}